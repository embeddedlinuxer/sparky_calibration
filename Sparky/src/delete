14d13
< #include "modbus-rtu.h"
18,34d16
< #define SLAVE_CALIBRATION   0xFA
< #define FUNC_READ_FLOAT     3
< #define FUNC_READ_INT       3
< #define FUNC_READ_COIL      0
< #define FUNC_WRITE_FLOAT    7
< #define FUNC_WRITE_INT      5
< #define FUNC_WRITE_COIL     4
< #define BYTE_READ_FLOAT     2
< #define BYTE_READ_INT       1
< #define BYTE_READ_COIL      1
< #define FLOAT_R             0
< #define FLOAT_W             1
< #define INT_R               2
< #define INT_W               3
< #define COIL_R              4
< #define COIL_W              5
< 
66a49
>     initializeValues();
91c74
<     connectCalibrationControls();
---
>     connectPlayControls();
327c310
< 	const QString funcType = descriptiveDataTypeName( func );
---
> 	const QString dataType = descriptiveDataTypeName( func );
349c332
< 		QTableWidgetItem * dtItem = new QTableWidgetItem( funcType );
---
> 		QTableWidgetItem * dtItem = new QTableWidgetItem( dataType );
405c388
< 	const QString funcType = descriptiveDataTypeName( func );
---
> 	const QString dataType = descriptiveDataTypeName( func );
486c469
< 				QTableWidgetItem * dtItem = new QTableWidgetItem( funcType );
---
> 				QTableWidgetItem * dtItem = new QTableWidgetItem( dataType );
553d535
< 
1620,2012d1601
< 
< void
< MainWindow::
< setupCalibrationRequest( void )
< {
<     if (ui->tabWidget_2->currentIndex() == 0)
<     {
<         if (m_modbus == NULL) // LOOP 1
<         {
<             setStatusError( tr("Loop_1 not configured!") );
<             return;       
<         }
< 
<         if (ui->tabWidget_3->currentIndex() == 0) // P1
<         {
<             if (ui->lineEdit_2->text().isEmpty()) return;
< 
<             const int slave = ui->lineEdit_2->text().toInt();
<             const int addr = 5;
<             uint8_t dest[1024];
<             uint16_t * dest16 = (uint16_t *) dest;
<             memset( dest, 0, 1024 );
<             int ret = -1;
<             bool is16Bit = false;
<             bool writeAccess = false;
<             const QString funcType = descriptiveDataTypeName( FUNC_READ_FLOAT );
< 
<             modbus_set_slave( m_serialModbus, slave );
<             sendCalibrationRequest(FLOAT_R, m_serialModbus, FUNC_READ_FLOAT, addr, BYTE_READ_FLOAT, ret, dest, dest16, is16Bit, writeAccess, funcType);
<         }
<         else if (ui->tabWidget_3->currentIndex() == 1)  // P2
<         {
<             const int slave = ui->lineEdit_3->text().toInt();
<             const int addr = 5;
<             uint8_t dest[1024];
<             uint16_t * dest16 = (uint16_t *) dest;
<             memset( dest, 0, 1024 );
<             int ret = -1;
<             bool is16Bit = false;
<             bool writeAccess = false;
<             const QString funcType = descriptiveDataTypeName( FUNC_READ_FLOAT );
< 
<             modbus_set_slave( m_serialModbus, slave );
<             sendCalibrationRequest(FLOAT_R, m_serialModbus, FUNC_READ_FLOAT, addr, BYTE_READ_FLOAT, ret, dest, dest16, is16Bit, writeAccess, funcType);
< 
<         }
<         else {  // P3
<             const int slave = ui->lineEdit_5->text().toInt();
<             const int addr = 5;
<             uint8_t dest[1024];
<             uint16_t * dest16 = (uint16_t *) dest;
<             memset( dest, 0, 1024 );
<             int ret = -1;
<             bool is16Bit = false;
<             bool writeAccess = false;
<             const QString funcType = descriptiveDataTypeName( FUNC_READ_FLOAT );
< 
<             modbus_set_slave( m_serialModbus, slave );
<             sendCalibrationRequest(FLOAT_R, m_serialModbus, FUNC_READ_FLOAT, addr, BYTE_READ_FLOAT, ret, dest, dest16, is16Bit, writeAccess, funcType);
< 
<         }       
<     }
<     else if (ui->tabWidget_2->currentIndex() == 1)
<     {
<         if (m_modbus_2 == NULL) // LOOP 2
<         {
<             setStatusError( tr("Loop_2 not configured!") );
<             return;
<         }
< 
<         if (ui->tabWidget_4->currentIndex() == 0) // P1
<         {
< 
<         }
<         else if (ui->tabWidget_4->currentIndex() == 1) // P2
<         {
< 
<         }
<         else { // P3
< 
<         }
< 
<         const int addr = ui->startAddr->value()-1;
<         int num = ui->numCoils->value();
<         uint8_t dest[1024];
<         uint16_t * dest16 = (uint16_t *) dest;
< 
<         memset( dest, 0, 1024 );
< 
<         int ret = -1;
<         bool is16Bit = false;
<         bool writeAccess = false;
<         const QString funcType = descriptiveDataTypeName( FUNC_READ_FLOAT );
< 
<         modbus_set_slave( m_serialModbus_2, SLAVE_CALIBRATION );
<         sendCalibrationRequest(FLOAT_R, m_serialModbus_2, FUNC_READ_FLOAT, addr, num, ret, dest, dest16, is16Bit, writeAccess, funcType);
<     }
<     else if (ui->tabWidget_2->currentIndex() == 2)
<     {
<         if (m_modbus_3 == NULL) // LOOP 3
<         {
<             setStatusError( tr("Loop_3 not configured!") );
<             return;
<         }
<         if (ui->tabWidget_5->currentIndex() == 0)
<         {
< 
<         }
<         else if (ui->tabWidget_5->currentIndex() == 1)
<         {
< 
<         }
<         else {
< 
<         }
< 
<         const int addr = ui->startAddr->value()-1;
<         int num = ui->numCoils->value();
<         uint8_t dest[1024];
<         uint16_t * dest16 = (uint16_t *) dest;
< 
<         memset( dest, 0, 1024 );
< 
<         int ret = -1;
<         bool is16Bit = false;
<         bool writeAccess = false;
<         const QString funcType = descriptiveDataTypeName( FUNC_READ_FLOAT );
< 
<         modbus_set_slave( m_serialModbus_3, SLAVE_CALIBRATION );
<         sendCalibrationRequest(FLOAT_R, m_serialModbus_3, FUNC_READ_FLOAT, addr, num, ret, dest, dest16, is16Bit, writeAccess, funcType);
<     }
<     else if (ui->tabWidget_2->currentIndex() == 3)
<     {
<         if (m_modbus_4 == NULL) // LOOP 4
<         {
<             setStatusError( tr("Loop_4 not configured!") );
<             return;
<         }
<         if (ui->tabWidget_6->currentIndex() == 0)
<         {
< 
<         }
<         else if (ui->tabWidget_6->currentIndex() == 1)
<         {
< 
<         }
<         else {
< 
<         }
< 
<         const int addr = ui->startAddr->value()-1;
<         int num = ui->numCoils->value();
<         uint8_t dest[1024];
<         uint16_t * dest16 = (uint16_t *) dest;
< 
<         memset( dest, 0, 1024 );
< 
<         int ret = -1;
<         bool is16Bit = false;
<         bool writeAccess = false;
<         const QString funcType = descriptiveDataTypeName( FUNC_READ_FLOAT );
< 
<         modbus_set_slave( m_serialModbus_4, SLAVE_CALIBRATION );
<         sendCalibrationRequest(FLOAT_R, m_serialModbus_4, FUNC_READ_FLOAT, addr, num, ret, dest, dest16, is16Bit, writeAccess, funcType);
<     }
<     else if (ui->tabWidget_2->currentIndex() == 4)
<     {
<         if (m_modbus_5 == NULL) // LOOP 5
<         {
<             setStatusError( tr("Loop_5 not configured!") );
<             return;
<         }
<         if (ui->tabWidget_7->currentIndex() == 0)
<         {
< 
<         }
<         else if (ui->tabWidget_7->currentIndex() == 1)
<         {
< 
<         }
<         else {
< 
<         }
< 
<         const int addr = ui->startAddr->value()-1;
<         int num = ui->numCoils->value();
<         uint8_t dest[1024];
<         uint16_t * dest16 = (uint16_t *) dest;
< 
<         memset( dest, 0, 1024 );
< 
<         int ret = -1;
<         bool is16Bit = false;
<         bool writeAccess = false;
<         const QString funcType = descriptiveDataTypeName( FUNC_READ_FLOAT );
< 
<         modbus_set_slave( m_serialModbus_5, SLAVE_CALIBRATION );
<         sendCalibrationRequest(FLOAT_R, m_serialModbus_5, FUNC_READ_FLOAT, addr, num, ret, dest, dest16, is16Bit, writeAccess, funcType);
<     }
<     else
<     {
<         if (m_modbus_6 == NULL) // LOOP 6
<         {
<             setStatusError( tr("Loop_6 not configured!") );
<             return;
<         }
< 
<         if (ui->tabWidget_8->currentIndex() == 0) // P1
<         {
< 
<         }
<         else if (ui->tabWidget_8->currentIndex() == 1) // P2
<         {
< 
<         }
<         else { // P3
< 
<         }
< 
<         const int addr = ui->startAddr->value()-1;
<         int num = ui->numCoils->value();
<         uint8_t dest[1024];
<         uint16_t * dest16 = (uint16_t *) dest;
< 
<         memset( dest, 0, 1024 );
< 
<         int ret = -1;
<         bool is16Bit = false;
<         bool writeAccess = false;
<         const QString funcType = descriptiveDataTypeName( FUNC_READ_FLOAT );
< 
<         modbus_set_slave( m_serialModbus_6, SLAVE_CALIBRATION );
<         sendCalibrationRequest(FLOAT_R, m_serialModbus_6, FUNC_READ_FLOAT, addr, num, ret, dest, dest16, is16Bit, writeAccess, funcType);
<     }
< }
< 
< QString
< MainWindow::
< sendCalibrationRequest(int dataType, modbus_t * serialModbus, int func, int addr, int num, int ret, uint8_t * dest, uint16_t * dest16, bool is16Bit, bool writeAccess, QString funcType)
< {
<     switch( func )
<     {
<         case MODBUS_FC_READ_COILS:
<             ret = modbus_read_bits( serialModbus, addr, num, dest );
<             break;
<         case MODBUS_FC_READ_DISCRETE_INPUTS:
<             ret = modbus_read_input_bits( serialModbus, addr, num, dest );
<             break;
<         case MODBUS_FC_READ_HOLDING_REGISTERS:
<             ret = modbus_read_registers( serialModbus, addr, num, dest16 );
<             is16Bit = true;
<             break;
<         case MODBUS_FC_READ_INPUT_REGISTERS:
<             ret = modbus_read_input_registers(serialModbus, addr, num, dest16 );
<             is16Bit = true;
<             break;
<         case MODBUS_FC_WRITE_SINGLE_COIL:
<             //ret = modbus_write_bit( m_modbus_snipping, addr,ui->regTable->item( 0, DataColumn )->text().toInt(0, 0) ? 1 : 0 );
<             ret = modbus_write_bit( serialModbus, addr,ui->radioButton_184->isChecked() ? 1 : 0 );
<             writeAccess = true;
<             num = 1;
<             break;
<         case MODBUS_FC_WRITE_SINGLE_REGISTER:
<             //ret = modbus_write_register( m_modbus_snipping, addr,ui->regTable->item( 0, DataColumn )->text().toInt(0, 0) );
<             ret = modbus_write_register( serialModbus, addr,ui->lineEdit_111->text().toInt(0, 0) );
<             writeAccess = true;
<             num = 1;
<             break;
<         case MODBUS_FC_WRITE_MULTIPLE_COILS:
<         {
<             uint8_t * data = new uint8_t[num];
<             for( int i = 0; i < num; ++i ) data[i] = ui->regTable->item( i, DataColumn )->text().toInt(0, 0);
<             ret = modbus_write_bits( serialModbus, addr, num, data );
<             delete[] data;
<             writeAccess = true;
<             break;
<         }
<         case MODBUS_FC_WRITE_MULTIPLE_REGISTERS:
<         {
<             float value;
<             QString qvalue = ui->lineEdit_109->text();
<             QTextStream floatTextStream(&qvalue);
<             floatTextStream >> value;
<             quint16 (*reg)[2] = reinterpret_cast<quint16(*)[2]>(&value);
<             uint16_t * data = new uint16_t[2];
<             data[0] = (*reg)[1];
<             data[1] = (*reg)[0];
<             ret = modbus_write_registers( serialModbus, addr, 2, data );
<             delete[] data;
<             writeAccess = true;
<             break;
<         }
<         default:
<             break;
<     }
< 
<     if( ret == num  )
<     {
<         if( writeAccess )
<         {
<             m_statusText->setText(tr( "Values successfully sent" ) );
<             m_statusInd->setStyleSheet( "background: #0b0;" );
<             m_statusTimer->start( 2000 );
<         }
<         else
<         {
<             //bool b_hex = is16Bit && ui->checkBoxHexData->checkState() == Qt::Checked;
<             QString qs_num;
<             QString qs_output = "0x";
<             bool ok = false;
< 
<             ui->regTable->setRowCount( num );
<             for( int i = 0; i < num; ++i )
<             {
<                 int data = is16Bit ? dest16[i] : dest[i];
<                 QString qs_tmp;
< 
<                 //QTableWidgetItem * dtItem = new QTableWidgetItem( funcType );
<                 //QTableWidgetItem * addrItem = new QTableWidgetItem(QString::number( ui->startAddr->value()+i ) );
<                 //qs_num.sprintf( b_hex ? "0x%04x" : "%d", data);
<                 qs_num.sprintf("%d", data);
<                 qs_tmp.sprintf("%04x", data);
<                 qs_output.append(qs_tmp);
<                 /*
<                 QTableWidgetItem * dataItem = new QTableWidgetItem( qs_num );
<                 dtItem->setFlags( dtItem->flags() & ~Qt::ItemIsEditable );
<                 addrItem->setFlags( addrItem->flags() & ~Qt::ItemIsEditable );
<                 dataItem->setFlags( dataItem->flags() & ~Qt::ItemIsEditable );
<                 ui->regTable->setItem( i, DataTypeColumn, dtItem );
<                 ui->regTable->setItem( i, AddrColumn, addrItem );
<                 ui->regTable->setItem( i, DataColumn, dataItem );
<                 if (ui->radioButton_182->isChecked()) ui->lineEdit_111->setText(QString::number(data));
<                 else if (ui->radioButton_183->isChecked())
<                 {
<                     (data) ? ui->radioButton_184->setChecked(true) : ui->radioButton_185->setChecked(true);
<                 } */
<                 if (dataType == FLOAT_R) // FLOAT_READ
<                 {// float
<                     QByteArray array = QByteArray::fromHex(qs_output.toLatin1());
<                     const float d = toFloat(array);
<                     return QString::number(d,'f',6);
<                 }
<                 else if (dataType == INT_R)
<                 {
<                     return QString::number(data);
<                 }
<                 else if (dataType == COIL_R)
<                 {
<                     return (data) ? "1" : "0";
<                 }
<             }
<         }
<     }
<     else
<     {
<         QString err;
< 
<         if( ret < 0 )
<         {
<             if(
< #ifdef WIN32
<                     errno == WSAETIMEDOUT ||
< #endif
<                     errno == EIO
<                                                                     )
<             {
<                 err += tr( "I/O error" );
<                 err += ": ";
<                 err += tr( "did not receive any data from slave." );
<             }
<             else
<             {
<                 err += tr( "Protocol error" );
<                 err += ": ";
<                 err += tr( "Slave threw exception '" );
<                 err += modbus_strerror( errno );
<                 err += tr( "' or function not implemented." );
<             }
<         }
<         else
<         {
<             err += tr( "Protocol error" );
<             err += ": ";
<             err += tr( "Number of registers returned does not "
<                     "match number of registers requested!" );
<         }
< 
<         if( err.size() > 0 )
<             setStatusError( err );
<     }
< }
< 
< 
2162,2164c1751
<                 QString cellData = valueList[7+j];;
<                 if (valueList[3].contains("int")) cellData = cellData.mid(0, cellData.indexOf("."));
< 
---
>                 QString cellData = valueList[7+j];
2189,2204c1776,1777
<         if( m_pollTimer->isActive() )
<         {
<             m_pollTimer->stop();
<             ui->startEquationBtn->setText( tr("Loading") );
<         }
<         else
<         {
<             // if polling requested then enable timer
<             if( m_poll )
<             {
<                 m_pollTimer->start( 1000 );
<                 ui->sendBtn->setText( tr("Loading") );
<             }
< 
<             onUploadEquation();
<         }
---
>         ui->startEquationBtn->setText("Uploading");
>         onUploadEquation();
2208,2226c1781,1784
<         if( m_pollTimer->isActive() )
<         {
<             m_pollTimer->stop();
<             ui->startEquationBtn->setText( tr("Loading") );
<         }
<         else
<         {
<             // if polling requested then enable timer
<             if( m_poll )
<             {
<                 m_pollTimer->start( 1000 );
<                 ui->sendBtn->setText( tr("Loading") );
<             }
<         
<             ui->tableWidget->clearContents();
<             ui->tableWidget->setRowCount(0);
< 
<             onDownloadEquation();
<         }
---
>         ui->tableWidget->clearContents();
>         ui->tableWidget->setRowCount(0);
>         ui->startEquationBtn->setText("Downloading");
>         onDownloadEquation();
2229c1787
<     ui->startEquationBtn->setText(tr("Start"));
---
>     ui->startEquationBtn->setText("Start");
3231a2790
>             ui->slaveID->setValue((int)ui->lcdNumber_8->value());
3235a2795
>             ui->slaveID->setValue((int)ui->lcdNumber_9->value());
3239a2800
>             ui->slaveID->setValue((int)ui->lcdNumber_10->value());
3246a2808
>             ui->slaveID->setValue((int)ui->lcdNumber_11->value());
3250a2813
>             ui->slaveID->setValue((int)ui->lcdNumber_12->value());
3254a2818
>             ui->slaveID->setValue((int)ui->lcdNumber_13->value());
3261a2826
>             ui->slaveID->setValue((int)ui->lcdNumber_14->value());
3265a2831
>             ui->slaveID->setValue((int)ui->lcdNumber_15->value());
3269a2836
>             ui->slaveID->setValue((int)ui->lcdNumber_16->value());
3277a2845
>             ui->slaveID->setValue((int)ui->lcdNumber_17->value());
3281a2850
>             ui->slaveID->setValue((int)ui->lcdNumber_18->value());
3285a2855
>             ui->slaveID->setValue((int)ui->lcdNumber_19->value());
3293a2864
>             ui->slaveID->setValue((int)ui->lcdNumber_20->value());
3297a2869
>             ui->slaveID->setValue((int)ui->lcdNumber_21->value());
3301a2874
>             ui->slaveID->setValue((int)ui->lcdNumber_22->value());
3309a2883
>             ui->slaveID->setValue((int)ui->lcdNumber_23->value());
3313a2888
>             ui->slaveID->setValue((int)ui->lcdNumber_24->value());
3317a2893
>             ui->slaveID->setValue((int)ui->lcdNumber_25->value());
3343a2920,2944
> void 
> MainWindow::
> initializeValues()
> {
>     ui->lcdNumber_8->display(1);
>     ui->lcdNumber_9->display(12);
>     ui->lcdNumber_10->display(13);
>     ui->lcdNumber_11->display(1);
>     ui->lcdNumber_12->display(22);
>     ui->lcdNumber_13->display(23);
>     ui->lcdNumber_14->display(31);
>     ui->lcdNumber_15->display(32);
>     ui->lcdNumber_16->display(33);
>     ui->lcdNumber_17->display(41);
>     ui->lcdNumber_18->display(42);
>     ui->lcdNumber_19->display(43);
>     ui->lcdNumber_20->display(51);
>     ui->lcdNumber_21->display(52);
>     ui->lcdNumber_22->display(53);
>     ui->lcdNumber_23->display(61);
>     ui->lcdNumber_24->display(62);
>     ui->lcdNumber_25->display(63);
> 
>     ui->numCoils->setValue(2);
> }
3348a2950
> 
3371c2973
< connectCalibrationControls()
---
> connectPlayControls()
3373,3390c2975,2992
<     connect(ui->pushButton_4, SIGNAL(pressed()), this, SLOT(calibration_1_1()));
<     connect(ui->pushButton_9, SIGNAL(pressed()), this, SLOT(calibration_1_2()));
<     connect(ui->pushButton_57, SIGNAL(pressed()), this, SLOT(calibration_1_3()));
<     connect(ui->pushButton_12, SIGNAL(pressed()), this, SLOT(calibration_2_1()));
<     connect(ui->pushButton_15, SIGNAL(pressed()), this, SLOT(calibration_2_2()));
<     connect(ui->pushButton_18, SIGNAL(pressed()), this, SLOT(calibration_2_3()));
<     connect(ui->pushButton_21, SIGNAL(pressed()), this, SLOT(calibration_3_1()));
<     connect(ui->pushButton_24, SIGNAL(pressed()), this, SLOT(calibration_3_2()));
<     connect(ui->pushButton_27, SIGNAL(pressed()), this, SLOT(calibration_3_3()));
<     connect(ui->pushButton_30, SIGNAL(pressed()), this, SLOT(calibration_4_1()));
<     connect(ui->pushButton_33, SIGNAL(pressed()), this, SLOT(calibration_4_2()));
<     connect(ui->pushButton_36, SIGNAL(pressed()), this, SLOT(calibration_4_3()));
<     connect(ui->pushButton_39, SIGNAL(pressed()), this, SLOT(calibration_5_1()));
<     connect(ui->pushButton_51, SIGNAL(pressed()), this, SLOT(calibration_5_2()));
<     connect(ui->pushButton_54, SIGNAL(pressed()), this, SLOT(calibration_5_3()));
<     connect(ui->pushButton_42, SIGNAL(pressed()), this, SLOT(calibration_6_1()));
<     connect(ui->pushButton_45, SIGNAL(pressed()), this, SLOT(calibration_6_2()));
<     connect(ui->pushButton_48, SIGNAL(pressed()), this, SLOT(calibration_6_3()));
---
>     connect(ui->pushButton_4, SIGNAL(pressed()), this, SLOT(play_1_1()));
>     connect(ui->pushButton_9, SIGNAL(pressed()), this, SLOT(play_1_2()));
>     connect(ui->pushButton_57, SIGNAL(pressed()), this, SLOT(play_1_3()));
>     connect(ui->pushButton_12, SIGNAL(pressed()), this, SLOT(play_2_1()));
>     connect(ui->pushButton_15, SIGNAL(pressed()), this, SLOT(play_2_2()));
>     connect(ui->pushButton_18, SIGNAL(pressed()), this, SLOT(play_2_3()));
>     connect(ui->pushButton_21, SIGNAL(pressed()), this, SLOT(play_3_1()));
>     connect(ui->pushButton_24, SIGNAL(pressed()), this, SLOT(play_3_2()));
>     connect(ui->pushButton_27, SIGNAL(pressed()), this, SLOT(play_3_3()));
>     connect(ui->pushButton_30, SIGNAL(pressed()), this, SLOT(play_4_1()));
>     connect(ui->pushButton_33, SIGNAL(pressed()), this, SLOT(play_4_2()));
>     connect(ui->pushButton_36, SIGNAL(pressed()), this, SLOT(play_4_3()));
>     connect(ui->pushButton_39, SIGNAL(pressed()), this, SLOT(play_5_1()));
>     connect(ui->pushButton_51, SIGNAL(pressed()), this, SLOT(play_5_2()));
>     connect(ui->pushButton_54, SIGNAL(pressed()), this, SLOT(play_5_3()));
>     connect(ui->pushButton_42, SIGNAL(pressed()), this, SLOT(play_6_1()));
>     connect(ui->pushButton_45, SIGNAL(pressed()), this, SLOT(play_6_2()));
>     connect(ui->pushButton_48, SIGNAL(pressed()), this, SLOT(play_6_3()));
3396c2998
< calibration_1_1()
---
> play_1_1()
3398,3400c3000,3005
<     //static bool isCalibration = false;
<     ui->pushButton_4->setText(tr("P A U S E"));   
<     setupCalibrationRequest();
---
>     static bool isPlay = false;
>     ui->pushButton_4->setText(tr("P A U S E"));
>     while (isPlay)
>     {
>         break;
>     }
3406c3011
< calibration_1_2()
---
> play_1_2()
3408,3410c3013,3015
<     static bool isCalibration = false;
<     ui->pushButton_9->setText(tr("P A U S E"));
<     setupCalibrationRequest();
---
>     if (ui->radioButton_10->isChecked()) qDebug("Razor");
>     else qDebug("EEA");
> 
3415c3020
< calibration_1_3()
---
> play_1_3()
3417,3419c3022,3026
<     static bool isCalibration = false;
<     ui->pushButton_57->setText(tr("P A U S E"));
<     setupCalibrationRequest();
---
> 
>     if (ui->radioButton_16->isChecked()) qDebug("Razor");
>     else qDebug("EEA");
> 
> 
3424c3031
< calibration_2_1()
---
> play_2_1()
3429,3431c3036,3037
<     static bool isCalibration = false;
<     ui->pushButton_12->setText(tr("P A U S E"));
<     setupCalibrationRequest();
---
> 
> 
3436c3042
< calibration_2_2()
---
> play_2_2()
3440,3442d3045
<     static bool isCalibration = false;
<     ui->pushButton_15->setText(tr("P A U S E"));
<     setupCalibrationRequest();
3447c3050
< calibration_2_3()
---
> play_2_3()
3448a3052
> 
3451,3453c3055
<     static bool isCalibration = false;
<     ui->pushButton_18->setText(tr("P A U S E"));
<     setupCalibrationRequest();
---
> 
3458c3060
< calibration_3_1()
---
> play_3_1()
3462,3464c3064,3067
<     static bool isCalibration = false;
<     ui->pushButton_21->setText(tr("P A U S E"));
<     setupCalibrationRequest();
---
> 
> 
> 
> 
3469c3072
< calibration_3_2()
---
> play_3_2()
3473,3475c3076,3078
<     static bool isCalibration = false;
<     ui->pushButton_24->setText(tr("P A U S E"));
<     setupCalibrationRequest();
---
> 
> 
> 
3480c3083
< calibration_3_3()
---
> play_3_3()
3484,3486c3087,3089
<     static bool isCalibration = false;
<     ui->pushButton_27->setText(tr("P A U S E"));
<     setupCalibrationRequest();
---
> 
> 
> 
3491c3094
< calibration_4_1()
---
> play_4_1()
3495,3497c3098,3100
<     static bool isCalibration = false;
<     ui->pushButton_30->setText(tr("P A U S E"));
<     setupCalibrationRequest();
---
> 
> 
> 
3502c3105
< calibration_4_2()
---
> play_4_2()
3506,3508c3109,3111
<     static bool isCalibration = false;
<     ui->pushButton_33->setText(tr("P A U S E"));
<     setupCalibrationRequest();
---
> 
> 
> 
3513c3116
< calibration_4_3()
---
> play_4_3()
3517,3519c3120,3122
<     static bool isCalibration = false;
<     ui->pushButton_36->setText(tr("P A U S E"));
<     setupCalibrationRequest();
---
> 
> 
> 
3524c3127
< calibration_5_1()
---
> play_5_1()
3528,3530c3131,3133
<     static bool isCalibration = false;
<     ui->pushButton_39->setText(tr("P A U S E"));
<     setupCalibrationRequest();
---
> 
> 
> 
3535c3138
< calibration_5_2()
---
> play_5_2()
3539,3541c3142,3144
<     static bool isCalibration = false;
<     ui->pushButton_51->setText(tr("P A U S E"));
<     setupCalibrationRequest();
---
> 
> 
> 
3546c3149
< calibration_5_3()
---
> play_5_3()
3550,3552c3153,3155
<     static bool isCalibration = false;
<     ui->pushButton_54->setText(tr("P A U S E"));
<     setupCalibrationRequest();
---
> 
> 
> 
3557c3160
< calibration_6_1()
---
> play_6_1()
3561,3563c3164,3166
<     static bool isCalibration = false;
<     ui->pushButton_42->setText(tr("P A U S E"));
<     setupCalibrationRequest();
---
> 
> 
> 
3568c3171
< calibration_6_2()
---
> play_6_2()
3572,3574c3175,3177
<     static bool isCalibration = false;
<     ui->pushButton_45->setText(tr("P A U S E"));
<     setupCalibrationRequest();
---
> 
> 
> 
3579c3182
< calibration_6_3()
---
> play_6_3()
3583,3585c3186,3188
<     static bool isCalibration = false;
<     ui->pushButton_48->setText(tr("P A U S E"));
<     setupCalibrationRequest();
---
> 
> 
> 
